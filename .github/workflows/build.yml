name: Build

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    # You can use either of the ubuntu-18.04 or ubuntu-20.04 runner
    steps:
      # Cleanup The Actions Workspace Using Custom Composite Run Actions
      - uses: rokibhasansagar/slimhub_actions@main

      - run: sudo apt-get update && sudo apt-get -y install git nano build-essential flex bison zip unzip curl screen gnupg zlib1g-dev libncurses5 x11proto-core-dev libx11-dev libgl1-mesa-dev gperf libc6-dev libxml2-utils xsltproc fontconfig openjdk-17-jdk libncurses6 procps gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev lib32z1-dev ccache gnupg rsync lib32z1-dev python3 && sudo ln -sf /usr/bin/python3 /usr/bin/python

      - run: |
            export REPO=/bin/repo
            sudo curl -o ${REPO} https://storage.googleapis.com/git-repo-downloads/repo && sudo chmod a+x ${REPO}

      - run: git config --global user.name "Your Name" && git config --global user.email "you@example.com"

      - run: repo init --depth=1 --no-repo-verify -u https://android.googlesource.com/platform/manifest -b master -g default,-mips,-darwin,-notdefault

      - run: repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j8

      - run: |
            source build/envsetup.sh
            lunch aosp_arm64-eng
            cd external
            git clone https://github.com/maruos/mflinger
            cd mflinger
            mm

      - run: curl --upload-file out/target/product/*/system/bin/mflinger https://transfer.sh/mflinger

      - run: curl --upload-file out/target/product/*/system/lib*/libmflinger.so https://transfer.sh/libmflinger.so
