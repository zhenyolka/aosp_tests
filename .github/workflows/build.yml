name: Build

on:
  push:

jobs:
  build:
    runs-on: ubuntu-18.04
    # You can use either of the ubuntu-18.04 or ubuntu-20.04 runner
    steps:
      # Cleanup The Actions Workspace Using Custom Composite Run Actions
      - uses: rokibhasansagar/slimhub_actions@main

      - name: Initializing environment
        run: |
          echo "::group::Install Build Env Tool"
          sudo -E apt-get clean
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install curl libstdc++6 git wget repo rsync aria2
          echo "::endgroup::"
          git config --global user.name "Your Name"
          git config --global user.email "you@example.com"
          git clone https://gitlab.com/OrangeFox/misc/scripts.git --depth=1 --single-branch
          cd scripts
          echo "::group::Setup Build Env"
          sudo -E bash setup/android_build_env.sh
          echo "::endgroup::"
          echo "::group::Install Android Sdk"
          sudo -E bash setup/install_android_sdk.sh
          echo "::endgroup::"

      - name: Sync recovery source
        run: |
          mkdir aosp
          cd aosp
          echo "::group::Repo Init"
          repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp -b twrp-12.1 --depth=1 --groups=all,-notdefault,-device,-darwin,-x86,-mips
          echo "::endgroup::"
          echo "::group::Repo Sync"
          repo sync -j4
          echo "::endgroup::"

      - name: Build
        run: |
          cd aosp
          source build/envsetup.sh
          lunch aosp_arm64-eng
          cd external
          git clone https://github.com/maruos/mflinger
          cd mflinger
          mm

      - run: curl --upload-file aosp/out/target/product/*/system/bin/mflinger https://transfer.sh/mflinger

      - run: curl --upload-file aosp/out/target/product/*/system/lib*/libmflinger.so https://transfer.sh/libmflinger.so
